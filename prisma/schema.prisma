// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Roles for the users
enum Role {
  CUSTOMER
  DELIVERY_REP
  VENDOR
  ADMIN
}

enum SocialAccountProvider {
  FACEBOOK
  GOOGLE
}

// Default user model
model User {
  id                    String                 @id @default(uuid()) @db.Uuid
  role                  Role                   @default(CUSTOMER)
  email                 String                 @unique
  password              String?
  name                  String
  inviteCode            String?
  publicKey             String?
  address               String?                @db.Text
  isSocialAccount       Boolean                @default(false)
  socialAccountProvider SocialAccountProvider?
  phoneNumber           String?
  avatar                String?                @db.Text
  emailVerified         Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  walletTransactions    WalletTransaction[]
  orders                Order[]
  // payOnDeliveryOrders PayOnDeliveryOrder[]
  customerProfile       CustomerProfile?       @relation("UserToCustomer")
  vendorProfile         VendorProfile?         @relation("UserToVendor")
  deliveryRepProfile    DeliveryRepProfile?    @relation("UserToDeliveryRep")
  document              Document? // It's a one to one field to ensure a user is associated to a document and no unnecessary document will be left fly around in the database
  feedbacks             Feedback[]
}

model Feedback {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.Uuid
  comment   String   @db.Text
  createdAt DateTime @default(now())
}

// customer profile
model CustomerProfile {
  id             String  @id @default(uuid()) @db.Uuid
  accountBalance Decimal @db.Decimal(20, 2)
  avgRating      Decimal @db.Decimal(2, 1)
  user           User    @relation("UserToCustomer", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String  @unique @db.Uuid
}

// Delivery Rep profile
model DeliveryRepProfile {
  id                  String  @id @default(uuid()) @db.Uuid
  accountBalance      Decimal @db.Decimal(20, 2)
  avgRating           Decimal @db.Decimal(2, 1)
  credentialsVerified Boolean @default(false)
  user                User    @relation("UserToDeliveryRep", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              String  @unique @db.Uuid
}

// vendor profile
model VendorProfile {
  id                  String  @id @default(uuid()) @db.Uuid
  accountBalance      Decimal @db.Decimal(20, 2)
  avgRating           Decimal @db.Decimal(2, 1)
  credentialsVerified Boolean @default(false)
  user                User    @relation("UserToVendor", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              String  @unique @db.Uuid
}

// user documents

enum DocumentStatus {
  VERIFIED
  NOT_VERIFIED
  PENDING
}

model Document {
  id     Int            @id @default(autoincrement())
  nin    String         @db.Text
  status DocumentStatus @default(NOT_VERIFIED)
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String         @unique @db.Uuid
}

enum TransactionType {
  DEPOSIT
  DEDUCTION
  REFUND
}

enum TransactionStatus {
  FAILED
  PENDING
  COMPLETED
}

model WalletTransaction {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String            @unique @db.Uuid
  transactionType TransactionType?
  amount          Decimal           @db.Decimal(20, 2)
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         Int               @unique
  status          TransactionStatus @default(COMPLETED)
  createdAt       DateTime          @default(now())
  transfers       Transfer[]
}

model GasStation {
  id                    Int       @id @default(autoincrement())
  name                  String    @db.VarChar(255)
  location              String    @db.VarChar(255)
  price                 Decimal   @db.Decimal(10, 2)
  rating                Decimal   @db.Decimal(2, 1)
  estimatedDeliveryTime String
  status                String    @db.VarChar(20)
  proximity             Float
  gasSizes              GasSize[]
  orders                Order[]
}

model GasSize {
  id        Int        @id @default(autoincrement())
  station   GasStation @relation(fields: [stationId], references: [id], onDelete: Cascade)
  stationId Int        @unique
  size      String     @db.VarChar(20)
  price     Decimal    @db.Decimal(10, 2)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Order {
  id                  Int                  @id @default(autoincrement())
  user                User                 @relation(fields: [userId], references: [id])
  userId              String               @db.Uuid
  station             GasStation           @relation(fields: [stationId], references: [id])
  stationId           Int                  @unique
  transactions        WalletTransaction[]
  payOnDeliveryOrders PayOnDeliveryOrder[]
  gasSize             String               @db.VarChar(20)
  refillSize          Decimal              @db.Decimal(10, 2)
  deliveryAddress     String               @db.VarChar(255)
  paymentMethod       String               @db.VarChar(50)
  amountDue           Decimal              @db.Decimal(10, 2)
  orderStatus         TransactionStatus    @default(PENDING)
  createdAt           DateTime             @default(now())
}

model PayOnDeliveryOrder {
  id              Int               @id @default(autoincrement())
  // user    User   @relation(fields: [userId], references: [id])
  // userId  String @db.Uuid
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         Int               @unique
  deliveryAddress String            @db.VarChar(255)
  phoneNumber     String            @db.VarChar(20)
  amountDue       Decimal           @db.Decimal(10, 2)
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
}

model Transfer {
  id             Int               @id @default(autoincrement())
  // user
  // userId String @db.Uuid
  amount         Decimal           @db.Decimal(10, 2)
  bankName       String            @db.VarChar(255)
  accountNumber  String            @db.VarChar(255)
  transaction    WalletTransaction @relation(fields: [transactionId], references: [id])
  transactionId  Int               @unique
  status         TransactionStatus @default(PENDING)
  proofOfPayment String            @db.Text
  createdAt      DateTime          @default(now())
}
